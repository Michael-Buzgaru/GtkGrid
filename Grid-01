#include <gtk/gtk.h>

struct _info
{
    GtkWidget *window;
    GtkWidget *grid;
    GtkWidget *label;
    GtkWidget *submit_button;
    /// ***
    GtkWidget *name_entry;
    GtkWidget *name_label;
    /// ***
    GtkWidget *userName_entry;
    GtkWidget *userName_label;
    /// ***
    GtkWidget *password_entry;
    GtkWidget *password_label;
    /// ***
    GtkWidget *email_entry;
    GtkWidget *email_label;
    /// ***
    GtkWidget *phone_entry;
    GtkWidget *phone_label;
} info;

static guint flag = 0;

gboolean zero_to_nine_keys_callback ( GtkWidget *widget, GdkEventKey *event );
void submit_clicked ( GtkWidget *widget );
void load_css ( void );
GtkWidget *createWindow ( const gint width, const gint height );
void activate_callback ( GtkWidget *widget );

int main ( int argc, char *argv[] )
{
    gtk_init ( &argc, &argv );
    load_css();
    info.window = createWindow ( 475, 400 );
    info.grid = gtk_grid_new();
    gtk_container_set_border_width ( GTK_CONTAINER ( info.grid ), 15 );
    gtk_widget_set_name ( info.grid, "myGrid" );
    gtk_grid_set_column_spacing ( GTK_GRID ( info.grid ), 5 );
    gtk_grid_set_row_spacing ( GTK_GRID ( info.grid ), 5 );
    /// ***
    info.label = gtk_label_new ( "Please enter your Information:" );
    gtk_widget_set_margin_top ( info.label, 25 );
    gtk_widget_set_margin_start ( info.label, 85 );
    /// ***
    info.password_label = gtk_label_new ( "Password: " );
    gtk_widget_set_margin_start ( info.password_label, 10 );
    /// ***
    info.name_label = gtk_label_new ( "Your Name: " );
    gtk_widget_set_margin_start ( info.name_label, 10 );
    /// ***
    info.userName_label = gtk_label_new ( "Username: " );
    gtk_widget_set_margin_start ( info.userName_label, 10 );
    /// ***
    info.phone_label = gtk_label_new ( "Phone: " );
    gtk_widget_set_margin_start ( info.phone_label, 0 );
    /// ***
    info.email_label = gtk_label_new ( "Email: " );
    gtk_widget_set_margin_start ( info.email_label, 0 );
    /// ***
    info.name_entry     = gtk_entry_new();
    info.userName_entry = gtk_entry_new();
    info.password_entry = gtk_entry_new();
    info.email_entry    = gtk_entry_new();
    info.phone_entry    = gtk_entry_new();
    /// ***
    gtk_entry_set_max_length ( GTK_ENTRY ( info.password_entry ), 8 );
    gtk_entry_set_visibility     ( GTK_ENTRY ( info.password_entry ), FALSE );
    gtk_entry_set_invisible_char ( GTK_ENTRY ( info.password_entry ), '*' );
    /// ***
    g_signal_connect_swapped ( info.name_entry,     "activate", G_CALLBACK ( activate_callback ), info.name_entry );
    g_signal_connect_swapped ( info.userName_entry, "activate", G_CALLBACK ( activate_callback ), info.userName_entry );
    g_signal_connect_swapped ( info.password_entry, "activate", G_CALLBACK ( activate_callback ), info.password_entry );
    g_signal_connect_swapped ( info.email_entry,    "activate", G_CALLBACK ( activate_callback ), info.email_entry );
    g_signal_connect_swapped ( info.phone_entry,    "activate", G_CALLBACK ( activate_callback ), info.phone_entry );
    g_signal_connect_swapped ( info.phone_entry,    "activate", G_CALLBACK ( zero_to_nine_keys_callback ), info.phone_entry );
    /// ***
    g_signal_connect_swapped ( info.phone_entry, "key_press_event", G_CALLBACK ( zero_to_nine_keys_callback ), info.phone_entry );
    /// ***
    info.submit_button = gtk_button_new_with_mnemonic ( "_Submit" );
    gtk_widget_set_name ( info.submit_button, "myButton" );
    /// ***
    g_signal_connect_swapped ( info.submit_button, "clicked", G_CALLBACK ( submit_clicked ), info.name_entry );
    g_signal_connect_swapped ( info.submit_button, "clicked", G_CALLBACK ( submit_clicked ), info.userName_entry );
    g_signal_connect_swapped ( info.submit_button, "clicked", G_CALLBACK ( submit_clicked ), info.password_entry );
    g_signal_connect_swapped ( info.submit_button, "clicked", G_CALLBACK ( submit_clicked ), info.email_entry );
    g_signal_connect_swapped ( info.submit_button, "clicked", G_CALLBACK ( submit_clicked ), info.phone_entry );
    /// ***
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.label,           0, 0, 2, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.name_label,      0, 1, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.userName_label,  0, 2, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.password_label,  0, 3, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.email_label,     0, 4, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.phone_label,     0, 5, 1, 1 );
    /// ***
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.name_entry,      1, 1, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.userName_entry,  1, 2, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.password_entry,  1, 3, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.email_entry,     1, 4, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.phone_entry,     1, 5, 1, 1 );
    gtk_grid_attach ( GTK_GRID ( info.grid ), info.submit_button,   1, 6, 1, 1 );
    /// ***
    gtk_widget_set_sensitive ( info.userName_entry,  FALSE );
    gtk_widget_set_sensitive ( info.password_entry,  FALSE );
    gtk_widget_set_sensitive ( info.phone_entry,     FALSE );
    gtk_widget_set_sensitive ( info.email_entry,     FALSE );
    gtk_widget_set_sensitive ( info.submit_button,   FALSE );
    /// ***
    gtk_container_add ( GTK_CONTAINER ( info.window ), info.grid );
    gtk_widget_show_all ( info.window );
    gtk_main();
}

void activate_callback ( GtkWidget *widget )
{
    const gchar *text = gtk_entry_get_text ( GTK_ENTRY ( widget ) );

    if ( strlen ( text ) > 0 )
    {
        switch ( flag )
        {
        case 0:
            gtk_widget_set_sensitive ( info.userName_entry, TRUE );
            gtk_entry_grab_focus_without_selecting ( GTK_ENTRY ( info.userName_entry ) );
            gtk_widget_set_sensitive ( info.name_entry,  FALSE );
            flag++;
            break;

        case 1:
            gtk_widget_set_sensitive ( info.password_entry, TRUE );
            gtk_entry_grab_focus_without_selecting ( GTK_ENTRY ( info.password_entry ) );
            gtk_widget_set_sensitive ( info.userName_entry,  FALSE );
            flag++;
            break;

        case 2:
            gtk_widget_set_sensitive ( info.email_entry, TRUE );
            gtk_entry_grab_focus_without_selecting ( GTK_ENTRY ( info.email_entry ) );
            gtk_widget_set_sensitive ( info.password_entry,  FALSE );
            flag++;
            break;

        case 3:
            gtk_widget_set_sensitive ( info.phone_entry, TRUE );
            gtk_entry_grab_focus_without_selecting ( GTK_ENTRY ( info.phone_entry ) );
            gtk_widget_set_sensitive ( info.email_entry,  FALSE );
            flag++;
            break;

        case 4:
            gtk_widget_set_sensitive ( info.submit_button, TRUE );
            gtk_window_set_focus ( GTK_WINDOW ( info.window ), info.submit_button );
            gtk_widget_set_sensitive ( info.phone_entry,  FALSE );
            flag++;
            break;

        default:
            flag = 5;
        }
    }
}

void submit_clicked ( GtkWidget *widget )
{
    static guchar status = 0;

    if ( status < 5  )
    {
        g_print ( "%s\n", gtk_entry_get_text ( GTK_ENTRY ( widget ) ) );
        gtk_widget_set_sensitive ( info.phone_entry,  FALSE );
        status++;
    }
}

void load_css ( void )
{
    GtkCssProvider *provider;
    GdkDisplay     *display;
    GdkScreen      *screen;
    /// ***
    const gchar *css_style_file = "style.css";
    GFile *css_fp               = g_file_new_for_path ( css_style_file );
    GError *error               = 0;
    /// ***
    provider = gtk_css_provider_new ();
    display  = gdk_display_get_default ();
    screen   = gdk_display_get_default_screen ( display );
    /// ***
    gtk_style_context_add_provider_for_screen   ( screen, GTK_STYLE_PROVIDER ( provider ), GTK_STYLE_PROVIDER_PRIORITY_APPLICATION );
    gtk_css_provider_load_from_file             ( provider, css_fp, &error );
    /// ***
    g_object_unref ( provider );
}

GtkWidget *createWindow ( const gint width, const gint height )
{
    GtkWidget *window = gtk_window_new  ( GTK_WINDOW_TOPLEVEL );
    g_signal_connect        ( window, "destroy", gtk_main_quit, window );
    gtk_widget_set_events   ( window, GDK_KEY_PRESS_MASK );
    /// ***
    gtk_window_set_default_size     ( GTK_WINDOW ( window ), width, height );
    gtk_container_set_border_width  ( GTK_CONTAINER ( window ), 50 );
    return window;
}

gboolean zero_to_nine_keys_callback ( GtkWidget *widget, GdkEventKey *event )
{
    ( void ) widget;
    guint keys[11] =
    {
        GDK_KEY_0, GDK_KEY_1, GDK_KEY_2, GDK_KEY_3, GDK_KEY_4,
        GDK_KEY_5, GDK_KEY_6, GDK_KEY_7, GDK_KEY_8, GDK_KEY_9,
        GDK_KEY_BackSpace
    };

    for ( guint i = 0 ; i < 11 ; i++ )
    {
        if ( event->keyval == keys[i] )
        {
            if ( gtk_widget_get_sensitive ( info.submit_button ) == FALSE )
            {
                gtk_widget_set_sensitive ( info.submit_button, TRUE );
            }

            return FALSE;
        }
    }

    return TRUE;
}
